# Using hatch
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "lookups"
description = "DCI lookups in Python (inspired by Netbeans Platform Lookups API)"
readme = "README.md"
license = "MPL-2.0"
license-files = [ "LICENSE" ]
authors = [
  { name = "Axel Voitier", email = "axel.voitier@gmail.com" },
]
requires-python = "~=3.9"
keywords = ["lookup", "lookups", "dci"]
classifiers = [
  # "Development Status :: 1 - Planning",
  # "Development Status :: 2 - Pre-Alpha",
  "Development Status :: 3 - Alpha",
  # "Development Status :: 4 - Beta",
  # "Development Status :: 5 - Production/Stable",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",  # Py 3.9 EOL: 2025/10
  "Programming Language :: Python :: 3.10",  # Py 3.10 EOL: 2026/10
  "Programming Language :: Python :: 3.11",  # Py 3.11 EOL: 2027/10
  "Programming Language :: Python :: 3.12",  # Py 3.12 EOL: 2028/10
  "Programming Language :: Python :: 3.13",  # Py 3.13 EOL: 2029/10
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Desktop Environment",
  "Topic :: Software Development :: User Interfaces",
  "Topic :: Text Editors :: Integrated Development Environments (IDE)",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
    "listeners",
    "typing_extensions",
]

[project.urls]
Homepage = "https://github.com/AxelVoitier/lookups"
Documentation = "https://github.com/AxelVoitier/lookups#readme"
Issues = "https://github.com/AxelVoitier/lookups/issues"
Source = "https://github.com/AxelVoitier/lookups.git"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.sdist]
include = [
  "lookups",
  "tests",
  "docs",
  "doc_templates",
  "mkdocs.yaml",
  ".flake8",
  "*.md",
]

[tool.hatch.build.targets.wheel]
packages = [
    "lookups",
]

[tool.hatch.envs.lint]
dependencies = [
  "ruff",
]

[tool.hatch.envs.lint.scripts]
check = "ruff check lookups tests; ruff check --statistics lookups tests"

[tool.hatch.envs.typing]
dependencies = [
  "mypy",
  "pyright",
  "pytest",  # Because it is imported in test files
]

[tool.hatch.envs.typing.scripts]
check-pyright = "pyright lookups tests"
check-mypy = "mypy lookups tests"
check = [
  "check-pyright",
  "check-mypy",
]

# [[tool.hatch.envs.typing.matrix]]
# python = [
#   "3.9",
#   "3.10",
#   "3.11",
#   "3.12",
#   "3.13",
# ]

[tool.hatch.envs.tests]
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-html",
]

[tool.hatch.envs.tests.scripts]
run = "py.test --cov=lookups --cov-report=term-missing --cov-report=xml:cov.xml tests"
run-x = "py.test --cov=lookups --cov-report=term-missing --cov-report=xml:cov.xml -x tests"

[[tool.hatch.envs.tests.matrix]]
python = [
  "3.9",
  "3.10",
  "3.11",
  "3.12",
  "3.13",
]

# Entry points only used by the tests
[project.entry-points."lookups.test_entry_point"]
parent = "tests.tools:TestParentObject"
child = "tests.tools:TestChildObject"
other = "tests.tools:TestOtherObject"
[project.entry-points."lookups.test_default_lookup"]
a_lookup = "tests.test_lookup_default:DefaultLookup"
[project.entry-points."lookups.test_default_lookup_lookup_provider"]
a_lookup = "tests.test_lookup_default:DefaultLookupLookupProvider"
[project.entry-points."lookups.test_default_lookup_provider"]
a_lookup = "tests.test_lookup_default:DefaulLookupProvider"
[project.entry-points."lookups.test_default_no_lookup"]
parent = "tests.tools:TestParentObject"
child = "tests.tools:TestChildObject"
other = "tests.tools:TestOtherObject"
[project.entry-points."lookups.test_default_empty_entry_point_group"]

# [tool.hatch.envs.doc]
# detached = true
# dependencies = [
#   "mkdocs",
#   "mkdocs-material",
#   "mkdocstrings[python]",
#   "mkdocs-gen-files",
#   "mkdocs-literate-nav",
#   "mkdocs-section-index",
#   "pillow",
#   "cairosvg",
#   "mike",
#   "mkdocs-git-revision-date-localized-plugin",
# ]

# [tool.hatch.envs.doc.scripts]
# build = "mkdocs build --clean --strict"
# serve = "ENABLE_PROD=False mkdocs serve --dev-addr localhost:8000"

[tool.mypy]
show_column_numbers = true
show_error_context = false
strict = true
ignore_missing_imports = false
# warn_no_return = true
# disallow_untyped_defs = true
# check_untyped_defs = false

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # "C408",  # "Unnecessary" `dict`, `list` or `tuple` calls instead of literals
  "Q",  # Quotes
  "SLF001",  # Access private _member
  "RET505",  # Else after return
  "ARG001",  # Unused function argument
  "ARG002",  # Unused method argument
  "PLW0603",  # Global statement to update variable
  "PLR0913",  # Too many arguments
  "PLR2004",  # Magic value in comparison
  "S101",  # Use of `assert` detected
  "RET504",  # Unnecessary assignment to `...` before `return` statement
  "A001",  # Variable `...` is shadowing a Python builtin
  "A002",  # Function argument `...` is shadowing a Python builtin
  "PYI025",  # Use AbstractSet instead of Set
  "FIX002",  # Line contains todo
  "TD",  # TODOs

  "D",  # Temporarily: docstrings
  "ERA001",  # Temporarily: commented out code
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "D",  # Docstrings
  "S101",  # Use of assert
  "T201",  # Print found
  "T203",  # P-Print found
  "TC002",  # Move third-party import `...` into a type-checking block
  "TC003",  # Move standard library import `...` into a type-checking block
  "PLR0912",  # Too many branches
  "PLR0915",  # Too many statements
]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["help"]

[tool.ruff.format]
quote-style = "single"
skip-magic-trailing-comma = false

[tool.pyright]
include = [
  "lookups",
  "tests",
]
exclude = [
  "tests/typing",
  "lookups/actionables.py",
  "tests/test_actionables.py",
]
typeCheckingMode = "strict"
reportPrivateUsage = "none"
reportImplicitOverride = "error"
reportImportCycles = "information"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "information"
reportShadowedImports = "information"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "information"
